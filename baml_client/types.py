# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (2)
# #########################################################################

class Gender(str, Enum):
    Male = "Male"
    Female = "Female"
    Other = "Other"

class Preferred_Contact_Method(str, Enum):
    Email = "Email"
    Phone = "Phone"

# #########################################################################
# Generated classes (9)
# #########################################################################

class Chosen_Theme(BaseModel):
    title: str
    description: str

class Classification(BaseModel):
    model_reasoning: str
    chosen_theme: "Chosen_Theme"

class Completed_Form(BaseModel):
    title: str
    type: str
    properties: "Properties"

class Contact_Info(BaseModel):
    type: typing.Optional[str] = None
    properties: typing.Optional["Contact_Properties"] = None

class Contact_Properties(BaseModel):
    email: typing.Optional[str] = None
    phone: typing.Optional[str] = None
    preferred_contact_method: typing.Optional[Preferred_Contact_Method] = None
    call_reasons: typing.Optional[typing.List[str]] = None

class Personal_Info(BaseModel):
    type: str
    properties: "Personal_Properties"

class Personal_Properties(BaseModel):
    first_name: str
    last_name: str
    gender: Gender

class Properties(BaseModel):
    personal_info: "Personal_Info"
    contact_info: "Contact_Info"

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
